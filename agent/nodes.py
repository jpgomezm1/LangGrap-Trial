# agent/nodes.py

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from agent.state import AgentState
from agent.tools import get_agent_tools, process_rut_with_gemini, generate_quotation_pdf
from services.email_service import EmailService
from config import config
import json
import logging
import time
import re

logger = logging.getLogger(__name__)

# Inicializar el modelo Gemini con configuraci√≥n optimizada
llm = ChatGoogleGenerativeAI(
    model=config.MODEL_NAME,
    google_api_key=config.GOOGLE_API_KEY,
    temperature=0.3,  # Reducido para ser m√°s consistente
    max_tokens=300,  # Reducido para ahorrar tokens
)

# Inicializar servicio de email
email_service = EmailService()

def rate_limit_delay():
    """A√±ade un peque√±o delay para evitar exceder la cuota"""
    time.sleep(0.8)  # 800ms delay entre llamadas

def safe_llm_invoke(prompt, max_retries=3):
    """Invoca el LLM de forma segura con manejo de errores y reintentos"""
    for attempt in range(max_retries):
        try:
            rate_limit_delay()  # Delay preventivo
            response = llm.invoke(prompt)
            return response
        except Exception as e:
            if "429" in str(e) or "quota" in str(e).lower():
                wait_time = min(60 * (attempt + 1), 300)  # Espera progresiva hasta 5 min
                logger.warning(f"Cuota excedida, esperando {wait_time}s antes del intento {attempt + 1}")
                time.sleep(wait_time)
                continue
            else:
                logger.error(f"Error en LLM (intento {attempt + 1}): {e}")
                if attempt == max_retries - 1:
                    raise e
                time.sleep(2)  # Espera 2s antes del siguiente intento
    
    raise Exception("Se agotaron los reintentos para el LLM")

def extract_info_advanced(message: str) -> dict:
    """
    Extracci√≥n avanzada de informaci√≥n con mejor detecci√≥n de patrones
    """
    message_lower = message.lower()
    extracted = {
        "user_name": None,
        "company_name": None,
        "phone": None,
        "email": None,
        "project_details": {
            "height": None,
            "duration_text": None,
            "duration_number": None,
            "work_type": None
        }
    }
    
    # Mejorar detecci√≥n de altura
    height_patterns = [
        r'(\d+)\s*(?:metros?|m\b|mts?)',
        r'(\d+)\s*(?:pisos?|plantas?|niveles?)',
        r'altura.*?(\d+)',
        r'(\d+)\s*(?:de altura|alto)',
        r'hasta.*?(\d+)\s*(?:metros?|m\b)',
        r'(\d+)\s*(?:metros?|m\b).*?(?:altura|alto)'
    ]
    
    for pattern in height_patterns:
        match = re.search(pattern, message_lower)
        if match:
            try:
                height = int(match.group(1))
                # Si menciona pisos/plantas, convertir a metros (aprox 3m por piso)
                if any(word in pattern for word in ['pisos', 'plantas', 'niveles']):
                    height = height * 3
                # Validar altura razonable (entre 1 y 100 metros)
                if 1 <= height <= 100:
                    extracted["project_details"]["height"] = height
                    break
            except:
                continue
    
    # Mejorar detecci√≥n de duraci√≥n
    duration_patterns = [
        (r'(\d+)\s*(?:d√≠as?|day)', 'd√≠as'),
        (r'(\d+)\s*(?:semanas?|week)', 'semanas'),
        (r'(\d+)\s*(?:meses?|month)', 'meses'),
        (r'(\d+)\s*(?:a√±os?|year)', 'a√±os'),
        (r'una?\s*(?:semana|week)', '1 semana'),
        (r'un?\s*(?:mes|month)', '1 mes'),
        (r'varios?\s*(?:d√≠as?|day)', 'varios d√≠as'),
        (r'algunas?\s*(?:semanas?|week)', 'algunas semanas')
    ]
    
    for pattern, unit in duration_patterns:
        match = re.search(pattern, message_lower)
        if match:
            try:
                if 'varios' in pattern or 'algunas' in pattern:
                    extracted["project_details"]["duration_text"] = unit
                    extracted["project_details"]["duration_number"] = 7  # Default
                else:
                    number = int(match.group(1))
                    extracted["project_details"]["duration_text"] = f"{number} {unit}"
                    extracted["project_details"]["duration_number"] = number
                break
            except:
                continue
    
    # Mejorar detecci√≥n de tipo de trabajo
    work_types = {
        'construcci√≥n': ['construc', 'obra', 'build', 'edificar', 'levantar'],
        'mantenimiento': ['manten', 'repair', 'reparar', 'arreglar', 'revisar'],
        'limpieza': ['limpi', 'clean', 'lavar', 'limpiar'],
        'pintura': ['pintu', 'paint', 'pintar'],
        'instalaci√≥n': ['instal', 'montar', 'colocar', 'poner'],
        'soldadura': ['sold', 'weld', 'soldar'],
        'electricidad': ['el√©ctric', 'electric', 'cableado', 'cables'],
        'plomer√≠a': ['plomer', 'tuber√≠a', 'pipes', 'agua'],
        'techos': ['techo', 'roof', 'cubierta', 'tejado'],
        'fachada': ['fachada', 'facade', 'exterior', 'muro']
    }
    
    for work_type, keywords in work_types.items():
        if any(keyword in message_lower for keyword in keywords):
            extracted["project_details"]["work_type"] = work_type
            break
    
    # Detecci√≥n de nombres (mejorada)
    name_patterns = [
        r'(?:soy|me llamo|mi nombre es)\s+([A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+(?:\s+[A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+)*)',
        r'([A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+)\s+(?:de|desde|en)\s+(?:la\s+)?(?:empresa|compa√±√≠a)',
        r'buenos?\s+d√≠as?,?\s+soy\s+([A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+(?:\s+[A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+)*)'
    ]
    
    for pattern in name_patterns:
        match = re.search(pattern, message)
        if match:
            name = match.group(1).strip()
            if len(name.split()) <= 3:  # M√°ximo 3 palabras para un nombre
                extracted["user_name"] = name
                break
    
    # Detecci√≥n de empresa (mejorada)
    company_patterns = [
        r'(?:empresa|compa√±√≠a|constructora|grupo)\s+([A-Z√Å√â√ç√ì√ö][A-Za-z√°√©√≠√≥√∫\s]+)',
        r'([A-Z√Å√â√ç√ì√ö][A-Za-z√°√©√≠√≥√∫\s]+)\s+(?:S\.?A\.?S?|LTDA|SAS|CIA)',
        r'de\s+([A-Z√Å√â√ç√ì√ö][A-Za-z√°√©√≠√≥√∫\s]+?)(?:\s+S\.?A\.?S?|\s+LTDA|\s+SAS|$)',
        r'trabajo\s+para\s+([A-Z√Å√â√ç√ì√ö][A-Za-z√°√©√≠√≥√∫\s]+)'
    ]
    
    for pattern in company_patterns:
        match = re.search(pattern, message)
        if match:
            company = match.group(1).strip()
            if 3 <= len(company) <= 50:  # Longitud razonable para nombre de empresa
                extracted["company_name"] = company
                break
    
    # Emails y tel√©fonos
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    email_match = re.search(email_pattern, message)
    if email_match:
        extracted["email"] = email_match.group(0)
    
    phone_pattern = r'(?:\+57\s?)?(?:3\d{2}|[1-8]\d{2})\s?\d{3}\s?\d{4}'
    phone_match = re.search(phone_pattern, message)
    if phone_match:
        extracted["phone"] = phone_match.group(0)
    
    return extracted

def extract_equipment_selection(message: str, equipment_list: list) -> int:
    """Extrae qu√© equipo seleccion√≥ el usuario del mensaje"""
    message_lower = message.lower()
    
    # Buscar n√∫meros expl√≠citos
    numbers = re.findall(r'\b(\d+)\b', message)
    for num in numbers:
        index = int(num) - 1  # Convertir a √≠ndice base 0
        if 0 <= index < len(equipment_list):
            return index
    
    # Buscar palabras ordinales
    ordinals = {
        'primer': 0, 'primera': 0, 'uno': 0,
        'segundo': 1, 'segunda': 1, 'dos': 1,
        'tercer': 2, 'tercera': 2, 'tres': 2
    }
    
    for word, index in ordinals.items():
        if word in message_lower and index < len(equipment_list):
            return index
    
    # Si menciona caracter√≠sticas espec√≠ficas, buscar coincidencia
    for i, equipment in enumerate(equipment_list):
        equipment_name = equipment.get('name', '').lower()
        if any(word in equipment_name for word in message_lower.split() if len(word) > 3):
            return i
    
    return None

def generate_response(template_name: str, context: dict) -> str:
    """Funci√≥n utilitaria para generar respuestas consistentes"""
    templates = {
        "welcome": f"""¬°Hola! Soy Sebasti√°n, tu asistente de {config.COMPANY_NAME} üëã

Estoy aqu√≠ para ayudarte a encontrar el equipo de altura perfecto para tu proyecto.

¬øPodr√≠as contarme qu√© tipo de trabajo necesitas realizar y a qu√© altura? üòä""",
        
        "clarification": """¬øPodr√≠as darme m√°s detalles sobre:
- ¬øA qu√© altura necesitas trabajar?
- ¬øQu√© tipo de trabajo vas a realizar?
- ¬øPor cu√°nto tiempo lo necesitas?

Esto me ayudar√° a recomendarte la mejor opci√≥n. üòä""",
        
        "missing_documents": """¬°Perfecto! Para generar tu cotizaci√≥n necesito:

{missing_items}

¬øCon cu√°l prefieres empezar? üòä""",
        
        "error": "Disculpa, tuve un problema. ¬øPodr√≠as darme m√°s detalles sobre tu proyecto?",
        
        "quota_exceeded": "Disculpa, estoy procesando muchas consultas. Dame un momento y vuelve a intentarlo en unos minutos. üòä"
    }
    
    template = templates.get(template_name, templates["error"])
    return template.format(**context) if context else template

def router_node(state: AgentState) -> AgentState:
    """
    Router completamente basado en AI que maneja toda la l√≥gica conversacional.
    """
    print("---ROUTER AI NODE---")
    messages = state['messages']
    
    if not messages:
        state["next_node"] = "consultation"
        logger.info("Router AI: Sin mensajes, comenzando consulta")
        return state
    
    # Si el √∫ltimo mensaje es del asistente, esperar respuesta del usuario
    if len(messages) > 0 and isinstance(messages[-1], AIMessage):
        state["next_node"] = "END"
        logger.info("Router AI: Esperando respuesta del cliente")
        return state
    
    # Casos cr√≠ticos que requieren acci√≥n inmediata (no AI)
    if state.get("document_path") and not state.get("client_info"):
        state["next_node"] = "process_rut"
        logger.info("Router AI: Documento recibido, procesando RUT")
        return state
    
    if state.get("quotation_pdf_path"):
        state["next_node"] = "send_quotation"
        logger.info("Router AI: PDF listo, enviando cotizaci√≥n")
        return state
    
    # USAR AI INTELIGENTE PARA TODA LA L√ìGICA CONVERSACIONAL
    try:
        intention = classify_conversation_intelligently(messages[-1].content, state)
        state["next_node"] = intention
        logger.info(f"Router AI: Decisi√≥n inteligente - {intention}")
        print(f"üß† AI decidi√≥: {intention}")
        return state
        
    except Exception as e:
        logger.error(f"Error en Router AI: {e}")
        state["next_node"] = "consultation"
        logger.info("Router AI: Fallback seguro a consultation")
        return state

def classify_conversation_intelligently(message: str, state: AgentState) -> str:
    """
    Clasificador AI avanzado que entiende el contexto completo de la conversaci√≥n.
    """
    
    # Contexto rico del estado actual
    project_details = state.get('project_details', {})
    has_recommendations = bool(state.get('recommended_equipment'))
    has_client_info = bool(state.get('client_info'))
    conversation_stage = state.get('conversation_stage', 'welcome')
    user_name = state.get('user_name', 'Usuario')
    company_name = state.get('company_name', 'No especificada')
    
    # Informaci√≥n de equipos disponibles
    recommendations_summary = ""
    if has_recommendations:
        equipment_names = [eq.get('name', 'Equipo') for eq in state.get('recommended_equipment', [])]
        recommendations_summary = f"Equipos ya recomendados: {', '.join(equipment_names)}"
    
    # Prompt s√∫per inteligente para Gemini
    classification_prompt = f"""Eres un router inteligente para un chatbot experto en alquiler de equipos de altura. Tu trabajo es decidir el siguiente paso en la conversaci√≥n basado en el contexto completo.

MENSAJE DEL USUARIO: "{message}"

CONTEXTO COMPLETO DE LA CONVERSACI√ìN:
- Usuario: {user_name} de {company_name}
- Etapa actual: {conversation_stage}
- Altura necesaria: {project_details.get('height', 'No especificada')}
- Tipo de trabajo: {project_details.get('work_type', 'No especificado')}
- Duraci√≥n proyecto: {project_details.get('duration_text', 'No especificada')}
- ¬øYa recomendamos equipos?: {has_recommendations}
- {recommendations_summary}
- ¬øTenemos datos del cliente?: {has_client_info}
- Email: {state.get('email', 'No')}
- Tel√©fono: {state.get('phone', 'No')}

OPCIONES DE NODOS:
1. "company_info" - Usuario pregunta sobre nuestra empresa, servicios, ubicaci√≥n, experiencia, horarios, contacto
2. "equipment_details" - Usuario pregunta detalles t√©cnicos, funcionamiento, seguridad, capacitaci√≥n de equipos espec√≠ficos
3. "analyze_requirements" - Tenemos info COMPLETA del proyecto (altura + trabajo + duraci√≥n) pero NO hemos recomendado equipos
4. "collect_documents" - Usuario pide cotizaci√≥n pero nos faltan datos (tel√©fono, email, RUT)
5. "generate_quotation" - Usuario pide cotizaci√≥n y tenemos TODOS los datos necesarios
6. "consultation" - Necesitamos m√°s info del proyecto, usuario se presenta, o conversaci√≥n general

REGLAS DE DECISI√ìN INTELIGENTE:

üè¢ EMPRESA: Si pregunta sobre nosotros/servicios/ubicaci√≥n/experiencia ‚Üí "company_info"
Ejemplos: "¬øQui√©nes son?", "¬øQu√© servicios ofrecen?", "¬øD√≥nde est√°n ubicados?"

üîß EQUIPOS: Si pregunta detalles t√©cnicos de equipos ya mencionados ‚Üí "equipment_details"  
Ejemplos: "¬øC√≥mo funciona el elevador?", "¬øQu√© capacitaci√≥n incluye?", "¬øEs seguro?"

üìã AN√ÅLISIS: Si tenemos altura + trabajo + duraci√≥n pero NO equipos ‚Üí "analyze_requirements"
Solo usar si: altura ‚â† null AND work_type ‚â† null AND duration_text ‚â† null AND no equipos recomendados

üí∞ COTIZACI√ìN SIN DATOS: Si pide precio pero falta email/tel√©fono ‚Üí "collect_documents"
Ejemplos: "Quiero cotizaci√≥n" pero no tenemos contacto completo

üí∞ COTIZACI√ìN COMPLETA: Si pide precio y tenemos todo ‚Üí "generate_quotation" 
Solo si: equipos recomendados + email + tel√©fono + datos cliente

üó£Ô∏è CONSULTA: Todo lo dem√°s (presentaciones, m√°s info proyecto, conversaci√≥n general)
Ejemplos: "Soy Juan de...", "Necesito para 20 metros", "Trabajo de limpieza"

AN√ÅLISIS CONTEXTUAL:
- Si dice "me interesa la opci√≥n X" ‚Üí "equipment_details" (quiere saber m√°s del equipo)
- Si dice "perfecto, procedamos" ‚Üí "collect_documents" or "generate_quotation" 
- Si da altura en pisos ‚Üí "consultation" (convertir y confirmar)
- Si menciona presupuesto/precio/cotizaci√≥n ‚Üí evaluar si tenemos datos completos

RESPONDE SOLO con UNA de estas 6 opciones exactas:
company_info, equipment_details, analyze_requirements, collect_documents, generate_quotation, consultation"""

    try:
        rate_limit_delay()
        
        # Usar configuraci√≥n optimizada para clasificaci√≥n
        classification_llm = ChatGoogleGenerativeAI(
            model="gemini-1.5-flash",
            google_api_key=config.GOOGLE_API_KEY,
            temperature=0.05,  # Muy bajo para m√°xima consistencia
            max_tokens=20      # Solo necesitamos la clasificaci√≥n
        )
        
        response = classification_llm.invoke(classification_prompt)
        intention = response.content.strip().lower()
        
        # Limpiar respuesta y validar
        valid_intentions = [
            "company_info", "equipment_details", "analyze_requirements",
            "collect_documents", "generate_quotation", "consultation"
        ]
        
        # Buscar coincidencia exacta o parcial
        for valid_intention in valid_intentions:
            if valid_intention in intention:
                logger.info(f"üß† AI clasific√≥: {valid_intention}")
                print(f"üéØ Decisi√≥n AI: {valid_intention}")
                return valid_intention
        
        # Si no encuentra una v√°lida, analizar contexto para fallback inteligente
        logger.warning(f"ü§î AI respuesta unclear: '{intention}', analizando contexto...")
        return intelligent_fallback(message, state)
            
    except Exception as e:
        logger.error(f"üí• Error en AI classification: {e}")
        return intelligent_fallback(message, state)

def intelligent_fallback(message: str, state: AgentState) -> str:
    """
    Fallback inteligente basado en contexto cuando AI falla.
    """
    message_lower = message.lower()
    project_details = state.get('project_details', {})
    
    # An√°lisis contextual inteligente
    
    # 1. Preguntas claramente sobre empresa
    company_signals = ['empresa', 'quienes', 'donde', 'ubicacion', 'servicios', 'experiencia', 'a√±os', 'contacto', 'horarios']
    if any(signal in message_lower for signal in company_signals):
        logger.info("üéØ Fallback: Detectada pregunta empresa")
        return "company_info"
    
    # 2. Info completa de proyecto ‚Üí analizar
    has_complete_project = (
        project_details.get('height') and 
        project_details.get('work_type') and 
        project_details.get('duration_text')
    )
    
    if has_complete_project and not state.get('recommended_equipment'):
        logger.info("üéØ Fallback: Proyecto completo, analizar requisitos")
        return "analyze_requirements"
    
    # 3. Solicitud de cotizaci√≥n
    quotation_signals = ['cotiza', 'precio', 'costo', 'presupuesto', 'cuanto', 'valor']
    if any(signal in message_lower for signal in quotation_signals):
        if state.get('recommended_equipment'):
            if state.get('email') and state.get('phone'):
                logger.info("üéØ Fallback: Cotizaci√≥n con datos completos")
                return "generate_quotation"
            else:
                logger.info("üéØ Fallback: Cotizaci√≥n sin datos cliente")
                return "collect_documents"
        else:
            logger.info("üéØ Fallback: Cotizaci√≥n sin equipos, m√°s info")
            return "consultation"
    
    # 4. Preguntas sobre equipos ya recomendados
    equipment_signals = ['funciona', 'caracteristicas', 'seguridad', 'capacitacion', 'especificaciones']
    if any(signal in message_lower for signal in equipment_signals) and state.get('recommended_equipment'):
        logger.info("üéØ Fallback: Pregunta sobre equipos")
        return "equipment_details"
    
    # 5. Por defecto: continuar conversaci√≥n
    logger.info("üéØ Fallback: Conversaci√≥n general")
    return "consultation"

def classify_user_intention(message: str, state: AgentState) -> str:
    """
    Usa Gemini para clasificar la intenci√≥n del usuario y decidir el siguiente nodo.
    """
    
    # Contexto del estado actual
    project_details = state.get('project_details', {})
    has_recommendations = bool(state.get('recommended_equipment'))
    has_client_info = bool(state.get('client_info'))
    conversation_stage = state.get('conversation_stage', 'welcome')
    
    # Prompt mejorado y m√°s espec√≠fico
    classification_prompt = f"""Clasifica la intenci√≥n del usuario en un chatbot de alquiler de equipos de altura.

MENSAJE DEL USUARIO: "{message}"

CONTEXTO:
- Etapa de conversaci√≥n: {conversation_stage}
- Proyecto definido: {bool(project_details)}
- Tiene recomendaciones de equipos: {has_recommendations}
- Informaci√≥n del cliente recopilada: {has_client_info}

CLASIFICACIONES POSIBLES:
1. "company_info" - Usuario PREGUNTA sobre nuestra empresa (¬øqui√©nes son?, ¬ød√≥nde est√°n?, ¬øqu√© servicios ofrecen?, etc.)
2. "equipment_details" - Usuario pregunta detalles t√©cnicos sobre equipos espec√≠ficos
3. "collect_documents" - Usuario solicita cotizaci√≥n pero nos falta informaci√≥n del cliente
4. "generate_quotation" - Usuario solicita cotizaci√≥n y ya tenemos toda la informaci√≥n
5. "analyze_requirements" - Tenemos informaci√≥n completa del proyecto pero no hemos recomendado equipos
6. "consultation" - Usuario se presenta, da informaci√≥n del proyecto, o conversaci√≥n general

REGLAS IMPORTANTES:
- Si el usuario se PRESENTA o da su informaci√≥n personal ‚Üí "consultation"
- Si el usuario PREGUNTA sobre nosotros/empresa ‚Üí "company_info"
- Si habla de su proyecto/necesidades ‚Üí "consultation"
- Si pide cotizaci√≥n expl√≠citamente ‚Üí "collect_documents" o "generate_quotation"

EJEMPLOS:
- "Soy Juan de Constructora ABC" ‚Üí consultation
- "¬øQui√©nes son ustedes?" ‚Üí company_info
- "Necesito equipos para 15 metros" ‚Üí consultation
- "Quiero una cotizaci√≥n" ‚Üí collect_documents

RESPONDE SOLO con una de las 6 clasificaciones exactas."""

    try:
        rate_limit_delay()
        
        classification_llm = ChatGoogleGenerativeAI(
            model="gemini-1.5-flash",
            google_api_key=config.GOOGLE_API_KEY,
            temperature=0.1,  # Muy bajo para consistencia
            max_tokens=15     # Un poco m√°s para asegurar respuesta completa
        )
        
        response = classification_llm.invoke(classification_prompt)
        intention = response.content.strip().lower()
        
        # Limpiar respuesta (a veces Gemini agrega texto extra)
        valid_intentions = [
            "company_info", "equipment_details", "collect_documents",
            "generate_quotation", "analyze_requirements", "consultation"
        ]
        
        # Buscar si alguna clasificaci√≥n v√°lida est√° en la respuesta
        for valid_intention in valid_intentions:
            if valid_intention in intention:
                logger.info(f"AI clasific√≥: {valid_intention}")
                return valid_intention
        
        # Si no encuentra una v√°lida, default a consultation
        logger.warning(f"Clasificaci√≥n no reconocida: '{intention}', usando consultation")
        return "consultation"
            
    except Exception as e:
        logger.error(f"Error clasificaci√≥n AI: {e}")
        return "consultation"

def company_info_node(state: AgentState) -> AgentState:
    """
    Nodo para responder preguntas sobre la empresa
    """
    print("---COMPANY INFO NODE---")
    
    last_message = state.get('current_message', '').lower()
    
    # Informaci√≥n base de la empresa
    company_responses = {
        'ubicaci√≥n': f"Estamos ubicados en Bogot√°, Colombia. Hacemos entregas en toda la ciudad y alrededores.",
        'contacto': f"Puedes contactarnos al {config.COMPANY_PHONE} o por email a {config.COMPANY_EMAIL}",
        'horarios': "Atendemos de lunes a viernes de 7:00 AM a 6:00 PM, y s√°bados de 8:00 AM a 2:00 PM",
        'experiencia': f"{config.COMPANY_NAME} cuenta con m√°s de 10 a√±os de experiencia en alquiler de equipos de altura",
        'servicios': "Ofrecemos alquiler de andamios, elevadores, escaleras y equipos especializados para trabajo en altura",
        'seguridad': "Todos nuestros equipos cumplen con las normas de seguridad colombianas y vienen con capacitaci√≥n incluida"
    }
    
    # Detectar qu√© informaci√≥n espec√≠fica busca
    response = None
    for keyword, info in company_responses.items():
        if keyword in last_message:
            response = info
            break
    
    if not response:
        # Respuesta general sobre la empresa
        response = f"""¬°Claro! Te cuento sobre {config.COMPANY_NAME}:

üèóÔ∏è **Somos especialistas en equipos de altura** con m√°s de 10 a√±os de experiencia
üìç **Ubicaci√≥n**: Bogot√°, Colombia (entregas en toda la ciudad)
‚è∞ **Horarios**: Lunes a viernes 7AM-6PM, s√°bados 8AM-2PM
üìû **Contacto**: {config.COMPANY_PHONE}
üìß **Email**: {config.COMPANY_EMAIL}

**Nuestros servicios incluyen:**
‚úÖ Alquiler de andamios multidireccionales
‚úÖ Elevadores tijera y articulados  
‚úÖ Escaleras telesc√≥picas y extensibles
‚úÖ Capacitaci√≥n en seguridad incluida
‚úÖ Entrega y recogida sin costo adicional en Bogot√°
‚úÖ Soporte t√©cnico 24/7

¬øTe gustar√≠a que te ayude a encontrar el equipo perfecto para tu proyecto? üòä"""

    state['response'] = response
    logger.info("Informaci√≥n de empresa proporcionada")
    return state

def equipment_details_node(state: AgentState) -> AgentState:
    """
    Nodo para proporcionar detalles espec√≠ficos sobre equipos
    """
    print("---EQUIPMENT DETAILS NODE---")
    
    last_message = state.get('current_message', '').lower()
    selected_equipment = state.get('selected_equipment')
    recommended_equipment = state.get('recommended_equipment', [])
    
    if not selected_equipment and recommended_equipment:
        selected_equipment = recommended_equipment[0]  # Usar el primero por defecto
    
    if not selected_equipment:
        state['response'] = "¬øSobre qu√© equipo te gustar√≠a conocer m√°s detalles?"
        return state
    
    # Detectar qu√© tipo de informaci√≥n busca
    detail_type = None
    if any(word in last_message for word in ['funciona', 'opera', 'maneja']):
        detail_type = 'operation'
    elif any(word in last_message for word in ['seguridad', 'riesgo', 'protecci√≥n']):
        detail_type = 'safety'
    elif any(word in last_message for word in ['especificaciones', 'caracter√≠sticas', 't√©cnico']):
        detail_type = 'specs'
    elif any(word in last_message for word in ['entrega', 'instalaci√≥n', 'montaje']):
        detail_type = 'delivery'
    elif any(word in last_message for word in ['capacitaci√≥n', 'entrenamiento', 'curso']):
        detail_type = 'training'
    
    equipment_name = selected_equipment.get('name', 'el equipo seleccionado')
    
    if detail_type == 'operation':
        response = f"""üîß **¬øC√≥mo funciona el {equipment_name}?**

{selected_equipment.get('description', 'Equipo profesional para trabajo en altura')}

**Caracter√≠sticas de operaci√≥n:**
- Altura m√°xima: {selected_equipment.get('max_height', 'N/A')} metros
- Capacidad de carga: {selected_equipment.get('specifications', {}).get('peso_max', 'Seg√∫n especificaciones')}
- Tipo de tracci√≥n: {selected_equipment.get('specifications', {}).get('tipo', 'Manual/El√©ctrico')}

**Casos de uso ideales:**
{chr(10).join([f"‚Ä¢ {use_case.title()}" for use_case in selected_equipment.get('use_cases', ['Trabajo en altura general'])])}

¬øTe gustar√≠a que te explique alg√∫n aspecto espec√≠fico del funcionamiento? ü§î"""
    
    elif detail_type == 'safety':
        response = f"""üõ°Ô∏è **Seguridad del {equipment_name}**

**Requisitos de seguridad:**
{selected_equipment.get('safety_requirements', 'Cumple con todas las normas colombianas de seguridad')}

**Medidas incluidas:**
‚úÖ Certificaci√≥n de seguridad vigente
‚úÖ Inspecci√≥n pre-entrega
‚úÖ Manual de operaci√≥n segura
‚úÖ Capacitaci√≥n b√°sica incluida
‚úÖ Soporte t√©cnico durante el alquiler

**Equipos de protecci√≥n requeridos:**
- Arn√©s de seguridad certificado
- Casco de protecci√≥n
- Guantes antideslizantes
- Calzado de seguridad

¬øNecesitas que incluyamos equipos de protecci√≥n personal en tu cotizaci√≥n? ü¶∫"""
    
    elif detail_type == 'specs':
        specs = selected_equipment.get('specifications', {})
        response = f"""üìã **Especificaciones t√©cnicas - {equipment_name}**

**Dimensiones y capacidades:**
- Altura m√°xima de trabajo: {selected_equipment.get('max_height', 'N/A')} metros
- Material: {specs.get('material', 'Acero galvanizado/Aluminio')}
- Peso m√°ximo: {specs.get('peso_max', 'Seg√∫n modelo')}
- Dimensiones base: {specs.get('base', 'Seg√∫n configuraci√≥n')}

**Caracter√≠sticas adicionales:**
{chr(10).join([f"‚Ä¢ {key.title()}: {value}" for key, value in specs.items() if key not in ['material', 'peso_max', 'base']])}

¬øNecesitas especificaciones m√°s detalladas para tu proyecto? üìê"""
    
    elif detail_type == 'delivery':
        response = f"""üöö **Entrega e instalaci√≥n del {equipment_name}**

**Servicio de entrega incluido:**
‚úÖ Entrega gratuita en Bogot√° y alrededores
‚úÖ Instalaci√≥n y configuraci√≥n b√°sica
‚úÖ Verificaci√≥n de seguridad en sitio
‚úÖ Capacitaci√≥n al personal

**Proceso de entrega:**
1Ô∏è‚É£ Coordinamos fecha y hora contigo
2Ô∏è‚É£ Nuestro equipo lleva el equipo al sitio
3Ô∏è‚É£ Realizamos instalaci√≥n y verificaci√≥n
4Ô∏è‚É£ Capacitamos a tu personal
5Ô∏è‚É£ Te entregamos documentaci√≥n

**Tiempos:**
- Entrega: 24-48 horas despu√©s de confirmado
- Recogida: Coordinada seg√∫n tu cronograma

¬øTienes alg√∫n requerimiento especial para la entrega? üìÖ"""
    
    elif detail_type == 'training':
        response = f"""üéì **Capacitaci√≥n para el {equipment_name}**

**Capacitaci√≥n incluida:**
‚úÖ Operaci√≥n segura del equipo
‚úÖ Procedimientos de emergencia
‚úÖ Inspecci√≥n diaria b√°sica
‚úÖ Uso correcto de EPP

**Duraci√≥n:** 2-3 horas seg√∫n el equipo
**Modalidad:** Presencial en tu obra
**Certificado:** Entregamos constancia de capacitaci√≥n

**Temas principales:**
- Principios de seguridad en altura
- Operaci√≥n paso a paso del equipo
- Identificaci√≥n de riesgos
- Protocolo de emergencias
- Mantenimiento b√°sico

¬øCu√°ntas personas de tu equipo necesitan capacitaci√≥n? üë•"""
    
    else:
        # Informaci√≥n general del equipo
        response = f"""‚ÑπÔ∏è **Informaci√≥n completa - {equipment_name}**

{selected_equipment.get('description', 'Equipo profesional para trabajo en altura')}

**Resumen:**
- üèóÔ∏è Altura m√°xima: {selected_equipment.get('max_height', 'N/A')} metros
- üí∞ Precio por d√≠a: ${selected_equipment.get('daily_price', 0):,.0f}
- üéØ Ideal para: {', '.join(selected_equipment.get('use_cases', ['trabajo general']))}

**¬øQu√© te gustar√≠a saber espec√≠ficamente?**
üîß Funcionamiento y operaci√≥n
üõ°Ô∏è Medidas de seguridad
üìã Especificaciones t√©cnicas
üöö Entrega e instalaci√≥n
üéì Capacitaci√≥n incluida

¬øO prefieres que procedamos con la cotizaci√≥n? üòä"""
    
    state['response'] = response
    logger.info(f"Detalles de equipo proporcionados: {detail_type or 'general'}")
    return state

def consultation_node(state: AgentState) -> AgentState:
    """
    Nodo de consulta mejorado con mejor extracci√≥n de informaci√≥n
    """
    print("---CONSULTATION NODE---")
    
    messages = state['messages']
    last_user_message = state.get('current_message', '')
    conversation_stage = state.get('conversation_stage', 'welcome')
    
    # Si es una pregunta sobre cotizaci√≥n sin info completa
    if any(word in last_user_message.lower() for word in ['cotiza', 'precio', 'costo']) and not state.get('project_details', {}).get('height'):
        state['response'] = """¬°Perfecto! Con gusto te ayudo con una cotizaci√≥n personalizada. 

Para darte las mejores opciones necesito conocer un poco sobre tu proyecto:

üèóÔ∏è **¬øA qu√© altura necesitas trabajar?** (en metros o n√∫mero de pisos)
üî® **¬øQu√© tipo de trabajo vas a realizar?** (construcci√≥n, mantenimiento, limpieza, pintura, etc.)
‚è∞ **¬øPor cu√°nto tiempo necesitas el equipo?** (d√≠as, semanas, meses)

Con esta informaci√≥n podr√© recomendarte el equipo perfecto y darte un precio exacto. üòä"""
        return state
    
    try:
        # Extracci√≥n mejorada de informaci√≥n
        extracted = extract_info_advanced(last_user_message)
        
        # Actualizar estado con los datos extra√≠dos
        if extracted.get("user_name"): 
            state["user_name"] = extracted["user_name"]
        if extracted.get("company_name"): 
            state["company_name"] = extracted["company_name"]
        if extracted.get("phone"): 
            state["phone"] = extracted["phone"]
        if extracted.get("email"): 
            state["email"] = extracted["email"]
        
        # Actualizar detalles del proyecto
        if extracted["project_details"]:
            if "project_details" not in state: 
                state["project_details"] = {}
            for key, value in extracted["project_details"].items():
                if value is not None:
                    state["project_details"][key] = value
        
        # Generar respuesta contextual
        project_details = state.get('project_details', {})
        
        # Determinar qu√© informaci√≥n falta
        missing_info = []
        if not project_details.get('height'):
            missing_info.append("altura de trabajo")
        if not project_details.get('work_type'):
            missing_info.append("tipo de trabajo")
        if not project_details.get('duration_text'):
            missing_info.append("duraci√≥n del proyecto")
        
        if len(messages) <= 2:  # Primera interacci√≥n
            response_text = generate_response("welcome", {})
        elif missing_info:
            if len(missing_info) == 3:
                response_text = "¬øPodr√≠as contarme m√°s sobre tu proyecto? Me ayudar√≠a saber a qu√© altura necesitas trabajar, qu√© tipo de trabajo vas a realizar y por cu√°nto tiempo necesitas el equipo. üòä"
            elif 'altura de trabajo' in missing_info:
                response_text = "¬øA qu√© altura necesitas trabajar? Puedes decirme en metros o n√∫mero de pisos. üìè"
            elif 'tipo de trabajo' in missing_info:
                response_text = "¬øQu√© tipo de trabajo vas a realizar? Por ejemplo: construcci√≥n, mantenimiento, limpieza, pintura, instalaciones, etc. üî®"
            elif 'duraci√≥n del proyecto' in missing_info:
                response_text = "¬øPor cu√°nto tiempo necesitas el equipo? (d√≠as, semanas o meses) ‚è∞"
        else:
            # üéØ AQU√ç EST√Å LA CLAVE: SI TENEMOS TODA LA INFO, FORZAR EL SIGUIENTE NODO
            height_text = f"{project_details.get('height')}m"
            work_type = project_details.get('work_type', 'trabajo')
            duration = project_details.get('duration_text', 'el tiempo especificado')
            
            response_text = f"""¬°Perfecto! Ya tengo toda la informaci√≥n que necesito:

üìã **Resumen de tu proyecto:**
- Altura: {height_text}
- Trabajo: {work_type}
- Duraci√≥n: {duration}

Ahora voy a buscar las mejores opciones de equipos para tu proyecto. Dame un momento... üîç"""
            
            # üöÄ FORZAR QUE EL PR√ìXIMO NODO SEA ANALYZE_REQUIREMENTS
            state['next_node'] = 'analyze_requirements'
            state['conversation_stage'] = 'analyzing_requirements'
        
        state['response'] = response_text
        logger.info("Consulta mejorada procesada exitosamente")
        
    except Exception as e:
        logger.error(f"Error en consultation_node: {e}")
        state['response'] = generate_response("error", {})
    
    return state

def analyze_requirements_node(state: AgentState) -> AgentState:
    """Nodo analizador de requerimientos con herramienta inteligente"""
    
    try:
        project_details = state.get('project_details', {})
        
        # Crear descripci√≥n del proyecto para la herramienta
        project_description = f"""
        Altura necesaria: {project_details.get('height', 'No especificada')} metros
        Tipo de trabajo: {project_details.get('work_type', 'General')}
        Duraci√≥n: {project_details.get('duration_text', 'No especificada')}
        """
        
        # Usar herramienta mejorada
        from agent.tools import GetEquipmentTool
        equipment_tool = GetEquipmentTool()
        
        # Llamar con descripci√≥n del proyecto
        equipment_data = equipment_tool._run(
            project_description=project_description.strip(),
            max_height=project_details.get('height', 10)
        )
        equipment_list = json.loads(equipment_data)
        
        # Tomar las mejores 3 opciones
        state['recommended_equipment'] = equipment_list[:3] if equipment_list else []
        state['conversation_stage'] = "recommending_equipment"
        
        logger.info(f"An√°lisis completado - {len(state['recommended_equipment'])} equipos recomendados")
        
    except Exception as e:
        logger.error(f"Error en analyze_requirements_node: {e}")
        state['recommended_equipment'] = []
        state['response'] = "Hubo un problema analizando tu proyecto. ¬øPodr√≠as proporcionarme los detalles nuevamente?"
    
    return state

def recommend_equipment_node(state: AgentState) -> AgentState:
    """Nodo recomendador de equipos"""
    
    try:
        recommended_equipment = state.get('recommended_equipment', [])
        project_details = state.get('project_details', {})
        
        if not recommended_equipment:
            state['response'] = """Lo siento, no encontr√© equipos espec√≠ficos para tu proyecto en este momento. 
            
Pero no te preocupes, nuestro equipo comercial puede ayudarte a encontrar la soluci√≥n perfecta. 
¬øTe gustar√≠a que un especialista se ponga en contacto contigo?"""
            return state
        
        # Generar recomendaciones
        recommendations_text = f"""üìã **Recomendaciones para tu proyecto:**

Bas√°ndome en tus necesidades (altura: {project_details.get('height', 'N/A')}m), estas son mis recomendaciones:

"""
        
        for i, eq in enumerate(recommended_equipment, 1):
            recommendations_text += f"""**Opci√≥n {i}: {eq['name']}**
üéØ Altura m√°xima: {eq['max_height']}m
üí∞ Precio: ${eq['daily_price']:,.0f} por d√≠a
üìù Descripci√≥n: {eq['description']}
‚úÖ Ideal para: {', '.join(eq.get('use_cases', ['uso general']))}

"""
        
        recommendations_text += """¬øCu√°l de estas opciones te parece m√°s interesante? ¬øTienes alguna pregunta espec√≠fica sobre alg√∫n equipo?

Tambi√©n puedo ayudarte con la cotizaci√≥n si alguna te convence. üòä"""
        
        state['response'] = recommendations_text
        state['conversation_stage'] = "equipment_selected"
        state['selected_equipment'] = recommended_equipment[0]  # Seleccionar el primero por defecto
        
        logger.info("Recomendaciones generadas exitosamente")
        
    except Exception as e:
        logger.error(f"Error en recommend_equipment_node: {e}")
        state['response'] = generate_response("error", {})
    
    return state

def collect_documents_node(state: AgentState) -> AgentState:
    """
    Nodo recolector de documentos. Ahora es m√°s simple y solo se activa
    si el router detecta que, tras pedir la cotizaci√≥n, falta alg√∫n dato.
    """
    
    # NODO DE RECOLECCI√ìN SIMPLIFICADO
    missing_items_text = []
    if not state.get('phone'):
        missing_items_text.append("un n√∫mero de tel√©fono de contacto")
    if not state.get('email'):
        missing_items_text.append("un email para enviar la cotizaci√≥n")
    if not state.get('documents', {}).get('rut'):
        missing_items_text.append("el RUT de la empresa (puedes escribir el n√∫mero o adjuntar el archivo)")

    if missing_items_text:
        missing_str = " y ".join(missing_items_text)
        state['response'] = f"¬°Claro que s√≠! Con gusto preparo tu cotizaci√≥n. Para finalizar, solo necesito que me ayudes con {missing_str}. ¬°Gracias!"
    else:
        # Esto es un fallback, en teor√≠a el router no deber√≠a llegar aqu√≠ si ya todo est√° completo.
        state['response'] = "¬°Perfecto! Ya tengo todo lo necesario. Estoy generando tu cotizaci√≥n ahora mismo..."
        state['next_node'] = "generate_quotation" # Forzamos el siguiente paso
    
    return state

def process_rut_node(state: AgentState) -> AgentState:
    """
    Procesa el archivo RUT (PDF) para extraer la informaci√≥n del cliente.
    """
    print("---PROCESS RUT NODE---")
    file_path = state.get("document_path")
    
    if not file_path:
        state['response'] = "Por favor, para continuar, env√≠ame el archivo PDF de tu RUT."
        return state

    try:
        client_info = process_rut_with_gemini(file_path)
        
        if "error" in client_info:
            state['response'] = f"Tuve un problema al leer el documento. El error fue: {client_info['error']}. ¬øPodr√≠as intentar enviarlo de nuevo?"
            return state
        
        # Actualizamos el estado con la informaci√≥n extra√≠da
        state['client_info'] = client_info
        state['company_name'] = client_info.get('company_name')
        state['nit'] = client_info.get('nit')
        state['email'] = client_info.get('email')
        state['document_path'] = None  # Limpiamos la ruta para no procesarlo de nuevo
        
        state['response'] = f"¬°Perfecto! He procesado el RUT. Confirmo que la empresa es {client_info.get('company_name', 'N/A')}. Ahora, proceder√© a generar la cotizaci√≥n."
        
        print(f"Informaci√≥n del RUT procesada: {client_info}")
        logger.info(f"RUT procesado exitosamente para {client_info.get('company_name')}")
        
    except Exception as e:
        print(f"Error al procesar el RUT: {e}")
        logger.error(f"Error al procesar el RUT: {e}")
        state['response'] = "Tuve un problema al leer el documento. ¬øPodr√≠as intentar enviarlo de nuevo, por favor?"
    
    return state

def generate_quotation_node(state: AgentState) -> AgentState:
    """
    Genera el PDF de la cotizaci√≥n y lo prepara para el env√≠o.
    """
    print("---GENERATE QUOTATION NODE---")
    
    try:
        recommended_equipment = state.get('recommended_equipment', [])
        project_details = state.get('project_details', {})
        
        if not recommended_equipment:
            state['response'] = "No puedo generar la cotizaci√≥n sin equipos seleccionados. ¬øPodr√≠as elegir un equipo de las opciones anteriores?"
            return state
        
        # Calcular duraci√≥n en d√≠as
        duration_number = project_details.get('duration_number', 7)
        duration_text = project_details.get('duration_text', '7 d√≠as')
        
        rental_days = duration_number
        if 'semana' in duration_text:
            rental_days = duration_number * 7
        elif 'mes' in duration_text:
            rental_days = duration_number * 30
        
        # Calcular cotizaci√≥n
        equipment_ids = [eq['id'] for eq in recommended_equipment]
        
        from agent.tools import CalculateQuotationTool
        quotation_tool = CalculateQuotationTool()
        
        quotation_data = quotation_tool._run(equipment_ids, rental_days)
        quotation = json.loads(quotation_data)
        
        # ESTA ES LA CORRECCI√ìN CR√çTICA: Generar PDF y devolver la ruta
        pdf_path = generate_quotation_pdf(
            client_info=state.get('client_info', {}),
            recommended_equipment=state['recommended_equipment'],
            quotation_data=quotation,
            project_details=project_details
        )
        
        # Guarda la ruta del PDF de la cotizaci√≥n en el estado
        state['quotation_pdf_path'] = pdf_path
        
        # Generar mensaje de cotizaci√≥n
        quotation_message = f"""üéâ **Cotizaci√≥n Generada - {config.COMPANY_NAME}**

üë§ **Cliente:** {state.get('user_name', 'N/A')}
üè¢ **Empresa:** {state.get('company_name', 'N/A')}
üìû **Tel√©fono:** {state.get('phone', 'N/A')}
üìß **Email:** {state.get('email', 'N/A')}

üìã **Detalle de Equipos:**
"""
        
        for eq in quotation['equipment_details']:
            quotation_message += f"""
**{eq['name']}**
- Duraci√≥n: {eq['rental_days']} d√≠as
- Precio por d√≠a: ${eq['daily_price']:,.0f}
- Subtotal: ${eq['calculated_price']:,.0f}
"""
        
        quotation_message += f"""
üí∞ **Resumen Financiero:**
- Subtotal: ${quotation['subtotal']:,.0f}
- IVA (19%): ${quotation['tax']:,.0f}
- **TOTAL: ${quotation['total_amount']:,.0f}**

üìù **Condiciones:**
‚úÖ Precios v√°lidos por 15 d√≠as
‚úÖ Incluye entrega y recogida en Bogot√°
‚úÖ Capacitaci√≥n b√°sica incluida
‚úÖ Soporte t√©cnico 24/7

¬°Listo! He generado tu cotizaci√≥n en PDF. Te la enviar√© en un momento."""
        
        state['quotation_data'] = quotation
        state['response'] = quotation_message
        state['ready_for_quotation'] = True
        state['conversation_stage'] = "quotation_generated"
        
        logger.info(f"Cotizaci√≥n generada - Total: ${quotation['total_amount']:,.0f}")
        
    except Exception as e:
        logger.error(f"Error generando cotizaci√≥n: {e}")
        state['response'] = "Hubo un error al crear el documento de la cotizaci√≥n. Estoy notificando al equipo para que te ayude."
        
    return state

def send_quotation_node(state: AgentState) -> AgentState:
    """
    Env√≠a la cotizaci√≥n al cliente y notifica al equipo comercial.
    Este nodo ahora tambi√©n se encarga de enviar el PDF.
    """
    print("---SEND QUOTATION NODE---")
    user_id = state.get('user_id')
    quotation_pdf_path = state.get("quotation_pdf_path")
    
    if not quotation_pdf_path:
        print("‚ùå Error: No se encontr√≥ la ruta del PDF de la cotizaci√≥n en el estado.")
        logger.error("No se encontr√≥ la ruta del PDF de la cotizaci√≥n en el estado.")
        state['response'] = "Lo siento, tuve un problema generando el documento de la cotizaci√≥n. Un asesor comercial se pondr√° en contacto contigo a la brevedad."
        return state

    # Prepara el mensaje final para el usuario
    final_message = "¬°Listo! Aqu√≠ tienes tu cotizaci√≥n. Nuestro equipo comercial la revisar√° y se pondr√° en contacto contigo si es necesario. ¬°Gracias por confiar en EquiposUp!"
    
    # La responsabilidad de enviar el mensaje y el documento por Telegram
    # se delega al servicio de Telegram para mantener los nodos agn√≥sticos a la plataforma.
    # Guardamos la ruta del PDF y el mensaje en el estado para que el servicio de Telegram los use.
    state['response_type'] = 'document'
    state['document_to_send'] = quotation_pdf_path
    state['final_message'] = final_message
    state['response'] = final_message
    
    print(f"Preparado para enviar cotizaci√≥n en PDF a {user_id}: {quotation_pdf_path}")
    
    # Guardar en base de datos
    try:
        from agent.tools import SaveConversationTool
        save_tool = SaveConversationTool()
        
        conversation_data = {
            "user_name": state.get('user_name'),
            "company_name": state.get('company_name'),
            "phone": state.get('phone'),
            "email": state.get('email'),
            "project_details": state.get('project_details'),
            "recommended_equipment": state.get('recommended_equipment'),
            "stage": state.get('conversation_stage', 'quotation_sent'),
            "quotation_sent": True
        }
        
        save_tool._run(state.get('user_id'), conversation_data)
        logger.info(f"Conversaci√≥n guardada para usuario {state.get('user_id')}")
        
    except Exception as e:
        logger.error(f"Error guardando conversaci√≥n: {e}")
    
    state['quotation_sent'] = True
    state['conversation_stage'] = "quotation_sent"
    
    return state

def notify_commercial_node(state: AgentState) -> AgentState:
    """Nodo notificador comercial"""
    
    try:
        logger.info(f"Cotizaci√≥n completada para usuario {state.get('user_id')} - {state.get('company_name')}")
        
        state['commercial_notified'] = True
        state['response'] = f"""¬°Perfecto! Tu cotizaci√≥n ha sido procesada exitosamente. 

Nuestro equipo comercial ha sido notificado y se pondr√° en contacto contigo en las pr√≥ximas horas para coordinar todos los detalles del alquiler.

¬°Gracias por elegir {config.COMPANY_NAME} para tu proyecto! üéâ

Si tienes alguna pregunta urgente, puedes contactarnos directamente en: {config.COMPANY_DOMAIN}"""
        
    except Exception as e:
        logger.error(f"Error en notify_commercial_node: {e}")
        state['commercial_notified'] = True
        state['response'] = f"¬°Cotizaci√≥n completada! Nuestro equipo se pondr√° en contacto contigo pronto. ¬°Gracias por elegir {config.COMPANY_NAME}! üöÄ"
    
    return state